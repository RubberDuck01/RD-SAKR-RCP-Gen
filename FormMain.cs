using System.Windows.Forms;

namespace RDRCPGen {
    public partial class FormMain : Form {
        // List of originals:
        private List<Record> originals = new List<Record>();
        private List<RecordModified> mods = new List<RecordModified>();

        public FormMain() {
            InitializeComponent();
        }

        // Load CSV:
        private void btnLoad_Click(object sender, EventArgs e) {
            try {
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = "CSV Files (*.csv)|*.csv";
                openFileDialog.Title = "Load CSV";

                if (openFileDialog.ShowDialog() == DialogResult.OK) {
                    // Load CSV, set label display:
                    string csvFilePath = openFileDialog.FileName;
                    string loadedFile = Path.GetFileName(csvFilePath);
                    lblLoadedFile.Text = loadedFile;

                    // save read data:
                    originals = Record.ReadCSV(csvFilePath);

                    // add to listbox (lbOriginals):
                    lbOriginals.Items.Clear();
                    foreach (Record item in originals) {
                        lbOriginals.Items.Add(item.ToListBoxHuman());
                    }
                }

                gbKWDs.Enabled = true;
            } catch (Exception ex) {
                MessageBox.Show($"Something went wrong:\n{ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // sets all checkboxes to unchecked:
        private void btnClear_Click(object sender, EventArgs e) {
            ClearCBstatus();
        }

        // adds selected kwds to selected object in lbMods:
        private void btnApply_Click(object sender, EventArgs e) {
            Record original = originals[lbOriginals.SelectedIndex];
            RecordModified modified = new RecordModified(original);

            foreach (Control ctrl in gbKWDs.Controls) {
                if (ctrl is CheckBox cb && cb.Checked) {
                    modified.Keywords.Add(cb.Tag.ToString());
                }
            }

            mods.Add(modified);

            lbOriginals.Items.Remove(original);
            lbMods.Items.Add(modified.ToListBoxHuman());

            ClearCBstatus();
        }

        public void ClearCBstatus() {
            foreach (var control in gbKWDs.Controls) {
                if (control is CheckBox cb) {
                    cb.Checked = false;
                }
            }
        }

        private void lbOriginals_SelectedIndexChanged(object sender, EventArgs e) {
            lblSelectedItem.Text = lbOriginals.SelectedItem.ToString();
        }

        private void btnWrite_Click(object sender, EventArgs e) {
            // Show save file dialog to get path to save the INI file
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "INI Files|*.ini";
            saveFileDialog.Title = "Save INI";

            if (saveFileDialog.ShowDialog() == DialogResult.OK) {
                // Get the selected path and write to the file
                using (StreamWriter sw = new StreamWriter(saveFileDialog.FileName)) {
                    sw.WriteLine("// INI automatically generated by RDRCPGen");
                    sw.WriteLine("// By RubberDuck\n");
                    // Loop through the mods list and write to the file
                    foreach (RecordModified mod in mods) {
                        // Write:
                        sw.Write($"// {mod.Item}"); // comment
                        // sw.WriteLine($"filterByArmors={mod.PluginName}|{mod.FormID}:keywordsToAdd=");
                        sw.WriteLine(); // new line
                        sw.Write("filterByArmors=" + mod.PluginName + "|" + mod.FormID + ":keywordsToAdd=");

                        bool first = true;
                        foreach (string kwd in mod.Keywords) {
                            if (!first) {
                                sw.Write(",");
                            }
                            sw.Write("SkimpyArmorKeywordResource.esm|" + kwd);
                            first = false;
                        }

                        // Write the keywords
                        /*
                        for (int i = 0; i < mod.Keywords.Count; i++) {
                            sw.WriteLine($"Keyword{i + 1}={mod.Keywords[i]}");
                        }
                        */

                        // Add an empty line between each record
                        sw.WriteLine();
                    }
                }

                MessageBox.Show("INI file saved successfully!");
            }
        }
    }
}